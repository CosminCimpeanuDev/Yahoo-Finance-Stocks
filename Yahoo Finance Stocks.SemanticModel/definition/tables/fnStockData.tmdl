table fnStockData
	isHidden
	lineageTag: cb939730-0e3d-47ba-9203-3f065bac86d0

	column Open
		dataType: double
		isHidden
		lineageTag: 31f5acc2-a15f-47c4-b517-075e75020a7a
		summarizeBy: sum
		sourceColumn: Open

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column High
		dataType: double
		isHidden
		lineageTag: 8e8814ca-1e49-4613-bec8-32aa00eea1c8
		summarizeBy: sum
		sourceColumn: High

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Low
		dataType: double
		isHidden
		lineageTag: d0219d65-5bff-4b74-9231-7434e4715e55
		summarizeBy: sum
		sourceColumn: Low

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Close
		dataType: double
		isHidden
		lineageTag: ec297a22-8769-42ae-9ec7-83f1185022af
		summarizeBy: sum
		sourceColumn: Close

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Date
		dataType: dateTime
		isHidden
		formatString: Long Date
		lineageTag: 46546015-3301-4fb1-b568-3becb54e6036
		summarizeBy: none
		sourceColumn: Date

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column Volume
		dataType: double
		isHidden
		lineageTag: 63e33e6b-9bd3-41d7-9872-b0cafe2a1bb8
		summarizeBy: sum
		sourceColumn: Volume

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Symbol
		dataType: string
		isHidden
		lineageTag: aea60603-19c5-45ec-a9db-1026f0d706a1
		summarizeBy: none
		sourceColumn: Symbol

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column Currency
		dataType: string
		isHidden
		lineageTag: 8f21a6b4-5867-40f3-a021-6c8d74be61dc
		summarizeBy: none
		sourceColumn: Currency

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column 'Exchange Name'
		dataType: string
		isHidden
		lineageTag: 8158400e-45bd-49e7-a43a-e9fde0036024
		summarizeBy: none
		sourceColumn: Exchange Name

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column Timezone
		dataType: string
		isHidden
		lineageTag: 0951c56c-7740-4d58-994f-e7b8f0b981ac
		summarizeBy: none
		sourceColumn: Timezone

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column 'Regular Market Price'
		dataType: double
		isHidden
		lineageTag: cb2e512a-4a5e-4898-8b90-11ff937df547
		summarizeBy: sum
		sourceColumn: Regular Market Price

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Regular Market Day High'
		dataType: double
		isHidden
		lineageTag: a6b6d1fa-105b-4888-aa50-4be0950fb68a
		summarizeBy: sum
		sourceColumn: Regular Market Day High

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Regular Market Day Low'
		dataType: double
		isHidden
		lineageTag: b60ecedf-d7e0-4f60-a6e9-ff4aef141d24
		summarizeBy: sum
		sourceColumn: Regular Market Day Low

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Regular Market Volume'
		dataType: double
		isHidden
		lineageTag: 6f819f19-7f72-426a-b398-73af0cb92d14
		summarizeBy: sum
		sourceColumn: Regular Market Volume

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Sector
		dataType: string
		isHidden
		lineageTag: 4777a6c7-720d-49f1-901e-14a8f3ae4d0a
		summarizeBy: none
		sourceColumn: Sector

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column Industry
		dataType: string
		isHidden
		lineageTag: c485c697-8187-4fda-9402-f4ad7dd1b577
		summarizeBy: none
		sourceColumn: Industry

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column 'Company Name'
		dataType: string
		lineageTag: fd7b869d-d10d-4eff-8c4b-751145b69d55
		summarizeBy: none
		sourceColumn: Company Name

		annotation SummarizationSetBy = Automatic

	column '52 Week High'
		dataType: double
		lineageTag: e9e3cbfd-f696-45d0-91c9-bdfe01f46cc1
		summarizeBy: sum
		sourceColumn: 52 Week High

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column '52 Week Low'
		dataType: double
		lineageTag: bad37bbf-887c-44c3-93a6-6d2f41f68430
		summarizeBy: sum
		sourceColumn: 52 Week Low

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'First Trade Date'
		dataType: dateTime
		formatString: Long Date
		lineageTag: 15b73d52-95ae-4113-adc8-babfd3deb457
		summarizeBy: none
		sourceColumn: First Trade Date

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column 'Regular Market Time'
		dataType: dateTime
		formatString: Long Date
		lineageTag: 1264e5c9-0eff-498f-a4a6-4f02f9533995
		summarizeBy: none
		sourceColumn: Regular Market Time

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	partition fnStockData = m
		mode: import
		source = ```
				let
				    // --- Initial Setup ---
				    // Reference the Stocks table instead of loading a CSV file
				    StocksSource = dimInputStocks, // Replace Stocks with the actual table name if different
				
				    // Define current timestamp and timestamp for 10 years ago
				    CurrentTimestamp = Text.BeforeDelimiter(
				                            Text.From(
				                                Duration.TotalSeconds(DateTime.LocalNow() - #datetime(1970,1,1,0,0,0))
				                            )
				                        ,"."), 
				    TenYearsAgoTimestamp = Text.BeforeDelimiter(
				                            Text.From(
				                                Duration.TotalSeconds(
				                                    DateTime.LocalNow() - #duration(3652, 0, 0, 0) // 365.25 * 10 days
				                                    - #datetime(1970,1,1,0,0,0)
				                                )
				                            ),"."),
				
				    // --- Helper Functions ---
				    // Function to introduce delay between requests (in seconds)
				    DelayRequest = (seconds as number) =>
				    let
				        startTime = DateTime.LocalNow(),
				        endTime = DateTime.AddSeconds(startTime, seconds),
				        wait = if DateTime.LocalNow() < endTime then
				                   @DelayRequest(seconds)
				               else
				                   null
				    in
				        wait,
				
				    // Function to fetch stock data for a given stock symbol with a delay
				    FetchStockData = (symbol as text, sector as text, industry as text) =>
				    let
				        // Introduce delay of 2 seconds between requests
				        _ = DelayRequest(2),
				
				        // Define the URL with dynamic period1 (10 years ago) and period2 (current timestamp)
				        requestUrl = "https://query2.finance.yahoo.com/v8/finance/chart/" & symbol & 
				              "?period1=" & TenYearsAgoTimestamp & 
				              "&period2=" & CurrentTimestamp & 
				              "&interval=1d" & 
				              "&includePrePost=true" & 
				              "&lang=en-US" & 
				              "&region=US",
				
				        // Retrieve the JSON data from Yahoo Finance
				        responseData = Json.Document(Web.Contents(requestUrl)),
				        chartData = responseData[chart],
				        resultData = chartData[result]{0},
				        
				        // Extract metadata for the stock
				        stockMetaData = resultData[meta],
				        stockCurrency = stockMetaData[currency],
				        stockExchange = stockMetaData[exchangeName],
				        stockInstrumentType = stockMetaData[instrumentType],
				        stockTimezone = stockMetaData[exchangeTimezoneName],
				        stockRegularMarketPrice = stockMetaData[regularMarketPrice],
				        stockFiftyTwoWeekHigh = stockMetaData[fiftyTwoWeekHigh],
				        stockFiftyTwoWeekLow = stockMetaData[fiftyTwoWeekLow],
				        stockRegularMarketDayHigh = stockMetaData[regularMarketDayHigh],
				        stockRegularMarketDayLow = stockMetaData[regularMarketDayLow],
				        stockRegularMarketVolume = stockMetaData[regularMarketVolume],
				        stockShortName = stockMetaData[shortName],
				        stockFirstTradeDate = stockMetaData[firstTradeDate],
				        stockRegularMarketTime = stockMetaData[regularMarketTime],
				
				        // Extract stock data
				        stockTimestamps = resultData[timestamp],
				        stockQuotes = resultData[indicators][quote]{0},
				        stockOpen = stockQuotes[open],
				        stockHigh = stockQuotes[high],
				        stockLow = stockQuotes[low],
				        stockClose = stockQuotes[close],
				        stockVolume = stockQuotes[volume],
				
				        // Combine stock data into a table
				        stockDataTable = Table.FromColumns({
				            stockTimestamps,
				            stockOpen,
				            stockHigh,
				            stockLow,
				            stockClose,
				            stockVolume
				        }, {"Timestamp", "Open", "High", "Low", "Close", "Volume"}),
				
				        // Add and transform metadata and timestamps
				        addCustomTimestamp = Table.AddColumn(stockDataTable, "Timestamp_Custom", each #datetime(1970, 1, 1, 0, 0, 0) + #duration(0, 0, 0, [Timestamp])),
				        changeTimestampType = Table.TransformColumnTypes(addCustomTimestamp, {{"Timestamp_Custom", type date}}),
				        removeOriginalTimestamp = Table.RemoveColumns(changeTimestampType,{"Timestamp"}),
				
				        // Set number columns to decimal type
				        changeDataType = Table.TransformColumnTypes(removeOriginalTimestamp,{
				            {"Open", type number}, 
				            {"High", type number}, 
				            {"Low", type number}, 
				            {"Close", type number}, 
				            {"Volume", type number}
				        }),
				
				        // Add metadata columns to the table
				        addCurrencyColumn = Table.AddColumn(changeDataType, "Currency", each stockCurrency),
				        addExchangeNameColumn = Table.AddColumn(addCurrencyColumn, "Exchange Name", each stockExchange),
				        addInstrumentTypeColumn = Table.AddColumn(addExchangeNameColumn, "Instrument Type", each stockInstrumentType),
				        addTimezoneColumn = Table.AddColumn(addInstrumentTypeColumn, "Timezone", each stockTimezone),
				        addRegularMarketPriceColumn = Table.AddColumn(addTimezoneColumn, "Regular Market Price", each stockRegularMarketPrice),
				        addFiftyTwoWeekHighColumn = Table.AddColumn(addRegularMarketPriceColumn, "52 Week High", each stockFiftyTwoWeekHigh),
				        addFiftyTwoWeekLowColumn = Table.AddColumn(addFiftyTwoWeekHighColumn, "52 Week Low", each stockFiftyTwoWeekLow),
				        addRegularMarketDayHighColumn = Table.AddColumn(addFiftyTwoWeekLowColumn, "Regular Market Day High", each stockRegularMarketDayHigh),
				        addRegularMarketDayLowColumn = Table.AddColumn(addRegularMarketDayHighColumn, "Regular Market Day Low", each stockRegularMarketDayLow),
				        addRegularMarketVolumeColumn = Table.AddColumn(addRegularMarketDayLowColumn, "Regular Market Volume", each stockRegularMarketVolume),
				        addShortNameColumn = Table.AddColumn(addRegularMarketVolumeColumn, "Company Name", each stockShortName),
				        addFirstTradeDateColumn = Table.AddColumn(addShortNameColumn, "First Trade Date", each stockFirstTradeDate),
				        addRegularMarketTimeColumn = Table.AddColumn(addFirstTradeDateColumn, "Regular Market Time", each stockRegularMarketTime),
				
				        // Add stock symbol, sector, and industry columns
				        addSymbolColumn = Table.AddColumn(addRegularMarketTimeColumn, "Symbol", each symbol),
				        addSectorColumn = Table.AddColumn(addSymbolColumn, "Sector", each sector),
				        addIndustryColumn = Table.AddColumn(addSectorColumn, "Industry", each industry)
				    in
				        addIndustryColumn,
				
				    // --- Process Stock Data ---
				    // Process each stock symbol in the Stocks table
				    allStockData = List.Transform(StocksSource[Symbol], each FetchStockData(_, StocksSource[Sector]{List.PositionOf(StocksSource[Symbol], _)}, StocksSource[Industry]{List.PositionOf(StocksSource[Symbol], _)})),
				
				    // Combine the data from all stocks
				    combinedStockData = Table.Combine(allStockData),
				    renamedColumns = Table.RenameColumns(combinedStockData,{{"Timestamp_Custom", "Date"}}),
				    changeColumnTypes = Table.TransformColumnTypes(renamedColumns,{{"Regular Market Price", type number}, {"52 Week High", type number}, {"52 Week Low", type number}, {"Regular Market Day High", type number}, {"Regular Market Day Low", type number}, {"Regular Market Volume", type number}}),
				
				    // Add datetime transformations for First Trade Date and Regular Market Time
				    addFirstTradeDateCustom = Table.AddColumn(changeColumnTypes, "Custom", each #datetime(1970, 1, 1, 0, 0, 0) + #duration(0, 0, 0, [First Trade Date])),
				    removeFirstTradeDateColumn = Table.RemoveColumns(addFirstTradeDateCustom,{"First Trade Date"}),
				    renameFirstTradeDateColumn = Table.RenameColumns(removeFirstTradeDateColumn,{{"Custom", "First Trade Date"}}),
				    addRegularMarketTimeCustom = Table.AddColumn(renameFirstTradeDateColumn, "Custom", each #datetime(1970, 1, 1, 0, 0, 0) + #duration(0, 0, 0, [Regular Market Time])),
				    removeRegularMarketTimeColumn = Table.RemoveColumns(addRegularMarketTimeCustom,{"Regular Market Time"}),
				    renameRegularMarketTimeColumn = Table.RenameColumns(removeRegularMarketTimeColumn,{{"Custom", "Regular Market Time"}}),
				    changeFinalColumnTypes = Table.TransformColumnTypes(renameRegularMarketTimeColumn,{{"Regular Market Time", type date}, {"First Trade Date", type date}}),
				
				    // Reorder and finalize columns
				    reorderColumns = Table.ReorderColumns(changeFinalColumnTypes,{"Date", "Symbol", "Company Name", "Sector", "Industry", "Open", "High", "Low", "Close", "Volume", "Currency", "Exchange Name", "Instrument Type", "Timezone", "Regular Market Price", "52 Week High", "52 Week Low", "Regular Market Day High", "Regular Market Day Low", "Regular Market Volume", "First Trade Date", "Regular Market Time"}),
				
				    // Final renaming and removal of redundant columns
				    removeInstrumentTypeColumn = Table.RemoveColumns(reorderColumns,{"Instrument Type"})
				in
				    removeInstrumentTypeColumn
				```

	changedProperty = IsHidden

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

